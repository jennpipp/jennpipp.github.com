<!doctype html>
<html>
<head>
<meta charset="UTF-8">
<title>Untitled Document</title>
</head>

<body>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.1/jquery.min.js"></script>
		<script src="js/three.min.js"></script>
		<script src="js/Detector.js"></script>
		<script>

			$('#logo2').fadeOut('10'); 

			var isOver = false;

			function out(){ 
				if(isOver==false){
					$('#logo2').fadeOut(); 
					$('#logo1').fadeIn(); 
				}
			}

			$('li').on({
				mouseenter: function(){
					isOver = true;
					$('#logo1').fadeOut(); 
					$('#logo2').fadeIn(); 
				},
				mouseout: function(){
					isOver = false;
					setTimeout(out,1000);
				}
			});



			if ( ! Detector.webgl ) {

				var m = document.getElementById('menu');
				m.style.display = "none";

				// Detector.addGetWebGLMessage();

				$('.title').css({
					top: '-10px',
					left: '50%',
					color: '#ddd',
					'margin-left':'-239px'
				});

				$('.ifnogl').css('display','inline');


			}
			
			var camera, scene, renderer;
			var geometry, material, mesh;

			var mouseX = 0, mouseY = 0;
			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;

			var cnt = 0;
			var meshes = [];

			function setup() {

				var W = window.innerWidth, H = window.innerHeight;
				renderer = new THREE.WebGLRenderer( { preserveDrawingBuffer: true } );
				renderer.autoClearColor = false;
				renderer.setSize( W, H );
				document.body.appendChild( renderer.domElement );

				camera = new THREE.PerspectiveCamera( 50, W/H, 1, 10000 );
				camera.position.z = 500;

				scene = new THREE.Scene();
				
				
				for ( var i = 0; i < 500; i ++ ) {

					var mpx = Math.random() * 1000 - 500;
					var mpy = Math.random() * 1000 - 500;
					var mpz = Math.random() * 1000 - 500;
					var mrx = Math.random() * 2 * Math.PI;
					var mry = Math.random() * 2 * Math.PI;
					var mrz = Math.random() * 2 * Math.PI;

					geometry = new THREE.CubeGeometry( 25, 25, 25 );

					material = new THREE.MeshBasicMaterial( { color: 0x000000, wireframe: true,  wireframeLinewidth: 2 } );
					mesh1 = new THREE.Mesh(geometry, material);
					mesh1.position.x = mpx;
					mesh1.position.y = mpy;
					mesh1.position.z = mpz;
					mesh1.rotation.x = mrx;
					mesh1.rotation.y = mry;
					mesh1.rotation.z = mrz;
					scene.add( mesh1 );
					
					material = new THREE.MeshBasicMaterial( { color: Math.random()*0xffffff } );
					mesh = new THREE.Mesh(geometry, material);
					mesh.position.x = mpx;
					mesh.position.y = mpy;
					mesh.position.z = mpz;
					mesh.rotation.x = mrx;
					mesh.rotation.y = mry;
					mesh.rotation.z = mrz;
					scene.add( mesh );

					
					meshes[ cnt ] = mesh;
					cnt += 1;
				}

				window.addEventListener( 'resize', onWindowResize, false );
				document.addEventListener( 'mousemove', onDocumentMouseMove, false );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );
				effect.setSize( window.innerWidth, window.innerHeight );

			}

			function onDocumentMouseMove(event) {
				mouseX = ( event.clientX - windowHalfX );
				mouseY = ( event.clientY - windowHalfY );
			}

			function draw() {

				requestAnimationFrame( draw );
				
				
				for ( i = 0; i < cnt; i ++ ) {
						mesh = meshes[ i ];
						var time = Date.now() * 0.0005;
						h = ( 360 * ( 1.0 + time ) % 360 ) / 360;
						mesh.material.color.setHSL(h, 0.5, 0.5 );
					//mesh.children[0].materials.color.setHSL(h, 0.5, 0.5 );
				}
				camera.position.x += ( mouseX - camera.position.x ) * .05;
				camera.position.y = THREE.Math.clamp( camera.position.y + ( - ( mouseY - 200 ) - camera.position.y ) * .05, 50, 1000 );
				camera.position.z = (mouseX + mouseY) * 2;
				//camera.position.z = Math.sin( Date.now() * 0.002 ) * 500;
				//camera.position.y = Math.sin( Date.now() * 0.002 ) * 300;
				camera.lookAt(mesh.position);

				renderer.render( scene, camera );

			}

			setup();
			draw();


		</script>
</body>
</html>
